---  -*- maude-command-options: ("-no-wrap" "-ansi-color" "-no-prelude") -*- 
load prelude.maude

fmod VAR is
    including QID .
    sort Var .
    subsort Qid < Var .
endfm
    
view Var from TRIV to VAR is
    sort Elt to Var .
endv

fmod SYMEXPR is
    pr INT .
    pr BOOL .

    sorts LInt LBool SymBool SymInt SymExpr .
    subsorts LBool < SymBool .
    subsorts LInt < SymInt .
    subsorts SymInt SymBool < SymExpr .

    op x(_): Nat -> LInt [ctor] .
    op b(_): Bool -> LBool [ctor] .
    op int _ : Int -> SymInt [ctor] .
    op bool _ : Bool -> SymBool [ctor] .

    op _+_ : SymInt SymInt -> SymInt [prec 20] .
    op _and_ : SymBool SymBool -> SymBool [prec 20] .
    op _==_ : SymExpr SymExpr -> SymBool [prec 25] .
endfm

view SymExpr from TRIV to SYMEXPR is
    sort Elt to SymExpr .
endv

fmod STATEMENTS is
    including VAR .
    including SYMEXPR .

    sorts Statement Statements .
    subsort Statement < Statements .

    op _:=_ : Var SymExpr -> Statement [ctor] .
    op skip : -> Statement [ctor] .
    op if (_) { _ } else { _ } : SymBool Statements Statements -> Statement [ctor] .
    op _;_ : Statements Statements -> Statements [ctor assoc prec 100] .
endfm

fmod THREAD is
    including STATEMENTS .
    sort Thread .
    op <_|_> : Nat Statements -> Thread [ctor] .
endfm

view Thread from TRIV to THREAD is
    sort Elt to Thread .
endv

fmod SYMPATH is
    sort SymPath .
    op epsilon : -> SymPath [ctor] .
    op _._ : SymPath SymPath -> SymPath [ctor assoc id: epsilon] .
endfm
    

fmod SYMBOLIC-STATE is
    including VAR .
    including SYMPATH .
    including SYMEXPR .
    including SET{Thread} .
    including MAP{Var, SymExpr} .
    
    sorts SymbolicState Pool Substitution .
    subsort Map{Var, SymExpr} < Substitution .
    subsort Set{Thread} < Pool .

    op (|_,_,_,_|) : Thread Pool Substitution SymPath -> SymbolicState [ctor] .
endfm

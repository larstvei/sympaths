load sympaths.maude
load dynamic.maude

mod TESTING is
    including SEMANTICS .
    including DYNAMIC-PROVER .

    vars Sigma Sigma' : Substitution .
    vars B : Nat .
    vars V : Var .
    vars Vs : Vars .
    vars E : Expr .
    vars Ev1 Ev2 : Event .
    vars Se : SymExpr .
    vars N : Int .
    vars P P' : Pool .
    vars NP NP' : NePool .
    vars Ss Ss' Ss'' : Statements .
    vars T T' : Thread .
    vars I I' : ThreadId .
    vars Sp Sp' : SymPath .
    vars S : SearchState .
    vars C : Configuration .

    op varsof : Pool -> Vars .
    eq varsof(empty) = empty .
    eq varsof((< I | Ss >, P)) = varsof(Ss), varsof(P) .

    op varsof : Statements -> Vars .
    eq varsof(skip) = empty .
    eq varsof((V := E ; Ss)) = V, vars(E), varsof(Ss) .
    eq varsof((if (E) { Ss } else { Ss' } ; Ss'')) = vars(E), varsof((Ss ; Ss' ; Ss'')) .
    eq varsof((while (E) { Ss } ; Ss')) = vars(E), varsof((Ss ; Ss')) .
    eq varsof((while (E)[ B ] { Ss } ; Ss')) = vars(E), varsof((Ss ; Ss')) .

    op sigma : Vars -> Substitution .
    eq sigma(Vs) = sigma(Vs, 0) .

    op sigma : Vars Nat -> Substitution .
    eq sigma(empty, N) = empty .
    eq sigma((V, Vs), N) = V |-> x(N), sigma(Vs, s N) .

    op count : Configuration -> Nat .
    eq count(none) = 0 .
    eq count(S C) = s count(C) .

    op init : Pool -> Configuration .
    eq init(P) = init(P, sigma(varsof(P))) .

    op init : Pool Substitution -> Configuration .
    eq init(P, Sigma) = [ < prefix: 0 por: 0 steps: 0 states: 1 > ] (| idle, Sigma, epsilon, P |) { empty } .
endm
